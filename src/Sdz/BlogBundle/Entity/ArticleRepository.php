<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	public function myFindAll()
	{
		return $this->createQueryBuilder('a')
		->getQuery()
		->getResult();
	}
	
	public function myFind()
	{
		$qb = $this->createQueryBuilder('a');
	
		// On peut ajouter ce qu'on veut avant
		$qb->where('a.auteur = :auteur')
		->setParameter('auteur', 'winzou');
	
		// On applique notre condition
		$qb = $this->whereCurrentYear($qb);
	
		// On peut ajouter ce qu'on veut après
		$qb->orderBy('a.date', 'DESC');
		 
		return $qb->getQuery()
		->getResult();
	}
	
	
	
	public function myFindOne($id)
	{
		// On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
		$qb = $this->_em->createQueryBuilder();
	
		$qb->select('a')
		->from('SdzBlogBundle:Article', 'a')
		->where('a.id = :id')
		->setParameter('id', $id);
	
		return $qb->getQuery()
		->getResult();
	}
	
	public function findByAuteurAndDate($auteur, $annee)
	{
		// On utilise le QueryBuilder créé par le repository directement pour gagner du temps
		// Plus besoin de faire le select() ni le from() par la suite donc
		$qb = $this->createQueryBuilder('a');
	
		$qb->where('a.auteur = :auteur')
		->setParameter('auteur', $auteur)
		->andWhere('a.date < :annee')
		->setParameter('annee', $annee)
		->orderBy('a.date', 'DESC');
	
		return $qb->getQuery()
		->getResult();
	}
	
	public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
	{
		$qb->andWhere('a.date BETWEEN :debut AND :fin')
		->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
		->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année
	
		return $qb;
	}

	
	public function getAvecCategories(array $nom_categories)
	{
		$qb = $this->createQueryBuilder('a');
	
		// On fait une jointure avec l'entité Categorie, avec pour alias « c »
		$qb ->join('a.categories', 'c')
		->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN
	
		// Enfin, on retourne le résultat
		return $qb->getQuery()
		->getResult();
	}
	
	
	
	public function getTest($nom_categories = array('*','symfony','doctrine'))
	{
		$qb = $this->createQueryBuilder('a');
	
		// On fait une jointure avec l'entité Categorie, avec pour alias « c »
		//$qb ->join('a.categories', 'c')
		//->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN
	
		// Enfin, on retourne le résultat
		return $qb->getQuery()
		->getResult();
	}
	
}
